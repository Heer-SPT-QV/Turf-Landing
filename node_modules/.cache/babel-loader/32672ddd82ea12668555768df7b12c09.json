{"ast":null,"code":"export var convertMinsToHrsMins=function convertMinsToHrsMins(minutes){var h=Math.floor(minutes/60);var m=minutes%60;h=h<10?\"0\"+h:h;m=m<10?\"0\"+m:m;return h+\":\"+m+\" HOURS\";};export var getMaxAllowedMonth=function getMaxAllowedMonth(setMaxAllowedDate){var date=new Date();var newDate=new Date(date.setMonth(date.getMonth()+1));setMaxAllowedDate(newDate.toISOString().slice(0,10));};export function tConvert(time){// Check correct time format and split into components\ntime=time.toString().match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/)||[time];if(time.length>1){// If time format correct\ntime=time.slice(1);// Remove full string match value\ntime[5]=+time[0]<12?\" AM\":\" PM\";// Set AM/PM\ntime[0]=+time[0]%12||12;// Adjust hours\n}return time.join(\"\");// return adjusted time or original string\n}","map":{"version":3,"sources":["/Users/sptdev/Desktop/reactjs/turf2/src/utils/TimeConverter.js"],"names":["convertMinsToHrsMins","minutes","h","Math","floor","m","getMaxAllowedMonth","setMaxAllowedDate","date","Date","newDate","setMonth","getMonth","toISOString","slice","tConvert","time","toString","match","length","join"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,OAAD,CAAa,CAC/C,GAAIC,CAAAA,CAAC,CAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAAG,EAArB,CAAR,CACA,GAAII,CAAAA,CAAC,CAAGJ,OAAO,CAAG,EAAlB,CACAC,CAAC,CAAGA,CAAC,CAAG,EAAJ,CAAS,IAAMA,CAAf,CAAmBA,CAAvB,CACAG,CAAC,CAAGA,CAAC,CAAG,EAAJ,CAAS,IAAMA,CAAf,CAAmBA,CAAvB,CACA,MAAOH,CAAAA,CAAC,CAAG,GAAJ,CAAUG,CAAV,CAAc,QAArB,CACD,CANM,CAQP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,iBAAD,CAAuB,CACvD,GAAMC,CAAAA,IAAI,CAAG,GAAIC,CAAAA,IAAJ,EAAb,CACA,GAAMC,CAAAA,OAAO,CAAG,GAAID,CAAAA,IAAJ,CAASD,IAAI,CAACG,QAAL,CAAcH,IAAI,CAACI,QAAL,GAAkB,CAAhC,CAAT,CAAhB,CACAL,iBAAiB,CAACG,OAAO,CAACG,WAAR,GAAsBC,KAAtB,CAA4B,CAA5B,CAA+B,EAA/B,CAAD,CAAjB,CACD,CAJM,CAMP,MAAO,SAASC,CAAAA,QAAT,CAAkBC,IAAlB,CAAwB,CAC7B;AACAA,IAAI,CAAGA,IAAI,CAACC,QAAL,GAAgBC,KAAhB,CAAsB,0CAAtB,GAAqE,CAC1EF,IAD0E,CAA5E,CAIA,GAAIA,IAAI,CAACG,MAAL,CAAc,CAAlB,CAAqB,CACnB;AACAH,IAAI,CAAGA,IAAI,CAACF,KAAL,CAAW,CAAX,CAAP,CAAsB;AACtBE,IAAI,CAAC,CAAD,CAAJ,CAAU,CAACA,IAAI,CAAC,CAAD,CAAL,CAAW,EAAX,CAAgB,KAAhB,CAAwB,KAAlC,CAAyC;AACzCA,IAAI,CAAC,CAAD,CAAJ,CAAU,CAACA,IAAI,CAAC,CAAD,CAAL,CAAW,EAAX,EAAiB,EAA3B,CAA+B;AAChC,CACD,MAAOA,CAAAA,IAAI,CAACI,IAAL,CAAU,EAAV,CAAP,CAAsB;AACvB","sourcesContent":["export const convertMinsToHrsMins = (minutes) => {\n  var h = Math.floor(minutes / 60);\n  var m = minutes % 60;\n  h = h < 10 ? \"0\" + h : h;\n  m = m < 10 ? \"0\" + m : m;\n  return h + \":\" + m + \" HOURS\";\n};\n\nexport const getMaxAllowedMonth = (setMaxAllowedDate) => {\n  const date = new Date();\n  const newDate = new Date(date.setMonth(date.getMonth() + 1));\n  setMaxAllowedDate(newDate.toISOString().slice(0, 10));\n};\n\nexport function tConvert(time) {\n  // Check correct time format and split into components\n  time = time.toString().match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [\n    time,\n  ];\n\n  if (time.length > 1) {\n    // If time format correct\n    time = time.slice(1); // Remove full string match value\n    time[5] = +time[0] < 12 ? \" AM\" : \" PM\"; // Set AM/PM\n    time[0] = +time[0] % 12 || 12; // Adjust hours\n  }\n  return time.join(\"\"); // return adjusted time or original string\n}\n"]},"metadata":{},"sourceType":"module"}