{"ast":null,"code":"export const convertMinsToHrsMins = minutes => {\n  var h = Math.floor(minutes / 60);\n  var m = minutes % 60;\n  h = h < 10 ? \"0\" + h : h;\n  m = m < 10 ? \"0\" + m : m;\n  return h + \":\" + m + \" HOURS\";\n};\nexport const getMaxAllowedMonth = setMaxAllowedDate => {\n  const date = new Date();\n  const newDate = new Date(date.setMonth(date.getMonth() + 1));\n  setMaxAllowedDate(newDate.toISOString().slice(0, 10));\n};\nexport function tConvert(time) {\n  // Check correct time format and split into components\n  time = time.toString().match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n  if (time.length > 1) {\n    // If time format correct\n    time = time.slice(1); // Remove full string match value\n\n    time[5] = +time[0] < 12 ? \" AM\" : \" PM\"; // Set AM/PM\n\n    time[0] = +time[0] % 12 || 12; // Adjust hours\n  }\n\n  return time.join(\"\"); // return adjusted time or original string\n}","map":{"version":3,"sources":["/Users/sptdev/Desktop/reactjs/turf2/src/utils/TimeConverter.js"],"names":["convertMinsToHrsMins","minutes","h","Math","floor","m","getMaxAllowedMonth","setMaxAllowedDate","date","Date","newDate","setMonth","getMonth","toISOString","slice","tConvert","time","toString","match","length","join"],"mappings":"AAAA,OAAO,MAAMA,oBAAoB,GAAIC,OAAD,IAAa;AAC/C,MAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,GAAG,EAArB,CAAR;AACA,MAAII,CAAC,GAAGJ,OAAO,GAAG,EAAlB;AACAC,EAAAA,CAAC,GAAGA,CAAC,GAAG,EAAJ,GAAS,MAAMA,CAAf,GAAmBA,CAAvB;AACAG,EAAAA,CAAC,GAAGA,CAAC,GAAG,EAAJ,GAAS,MAAMA,CAAf,GAAmBA,CAAvB;AACA,SAAOH,CAAC,GAAG,GAAJ,GAAUG,CAAV,GAAc,QAArB;AACD,CANM;AAQP,OAAO,MAAMC,kBAAkB,GAAIC,iBAAD,IAAuB;AACvD,QAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,QAAMC,OAAO,GAAG,IAAID,IAAJ,CAASD,IAAI,CAACG,QAAL,CAAcH,IAAI,CAACI,QAAL,KAAkB,CAAhC,CAAT,CAAhB;AACAL,EAAAA,iBAAiB,CAACG,OAAO,CAACG,WAAR,GAAsBC,KAAtB,CAA4B,CAA5B,EAA+B,EAA/B,CAAD,CAAjB;AACD,CAJM;AAMP,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AAC7B;AACAA,EAAAA,IAAI,GAAGA,IAAI,CAACC,QAAL,GAAgBC,KAAhB,CAAsB,0CAAtB,KAAqE,CAC1EF,IAD0E,CAA5E;;AAIA,MAAIA,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB;AACnB;AACAH,IAAAA,IAAI,GAAGA,IAAI,CAACF,KAAL,CAAW,CAAX,CAAP,CAFmB,CAEG;;AACtBE,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAACA,IAAI,CAAC,CAAD,CAAL,GAAW,EAAX,GAAgB,KAAhB,GAAwB,KAAlC,CAHmB,CAGsB;;AACzCA,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAACA,IAAI,CAAC,CAAD,CAAL,GAAW,EAAX,IAAiB,EAA3B,CAJmB,CAIY;AAChC;;AACD,SAAOA,IAAI,CAACI,IAAL,CAAU,EAAV,CAAP,CAZ6B,CAYP;AACvB","sourcesContent":["export const convertMinsToHrsMins = (minutes) => {\n  var h = Math.floor(minutes / 60);\n  var m = minutes % 60;\n  h = h < 10 ? \"0\" + h : h;\n  m = m < 10 ? \"0\" + m : m;\n  return h + \":\" + m + \" HOURS\";\n};\n\nexport const getMaxAllowedMonth = (setMaxAllowedDate) => {\n  const date = new Date();\n  const newDate = new Date(date.setMonth(date.getMonth() + 1));\n  setMaxAllowedDate(newDate.toISOString().slice(0, 10));\n};\n\nexport function tConvert(time) {\n  // Check correct time format and split into components\n  time = time.toString().match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [\n    time,\n  ];\n\n  if (time.length > 1) {\n    // If time format correct\n    time = time.slice(1); // Remove full string match value\n    time[5] = +time[0] < 12 ? \" AM\" : \" PM\"; // Set AM/PM\n    time[0] = +time[0] % 12 || 12; // Adjust hours\n  }\n  return time.join(\"\"); // return adjusted time or original string\n}\n"]},"metadata":{},"sourceType":"module"}